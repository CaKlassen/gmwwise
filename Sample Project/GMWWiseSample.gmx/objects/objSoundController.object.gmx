<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// STARTING FUNCTIONALITY //

// GMWWise Initialization
global.GMW_PROFILE = true;

if (!gmwLoad())
{
    // Failed to load the DLLs
    game_end();
}

gmwInit();

gmwSetBasePath("banks/");
gmwRegisterCodec(0);
gmwRegisterPlugin(6);

// Initialize the banks
global.INIT_BANK = gmwLoadBank("Init.bnk");
global.GAME_BANK = gmwLoadBank("SoundBank.bnk");

global.DEFAULT_GROUP = 1;

// Register the sound controller with the engine
gmwRegisterObject(id, "Sound Controller", global.DEFAULT_GROUP);


// Initialize links to IDs
global.WWE_BOUNCE = 3465618802;
global.WWE_PLAY_MUSIC = 2932040671;

global.WWSG_AUDIO_TYPE = 1382476432;
global.WWS_REGULAR_EARS = 3909415557;
global.WWS_PLUGGED_EARS = 3764425673;

global.WWXG_WALL_GROUP = 376337484;
global.WWX_WALL_STONE = 1216965916;
global.WWX_WALL_WOOD = 2058049674;

global.WWP_MUSIC_VOLUME = 1006694123;

// Set the music volume to max and start playing it
global.VOLUME = 100;

gmwSetGlobalParameter(global.WWP_MUSIC_VOLUME, global.VOLUME);
gmwPostEvent(global.WWE_PLAY_MUSIC, id);

// Set up the initial ear state
global.PLUGGED_EARS = false;
gmwSetState(global.WWSG_AUDIO_TYPE, global.WWS_REGULAR_EARS);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Unregister the sound controller
gmwUnregisterObject(id, global.DEFAULT_GROUP);

// Unload the sound banks
gmwUnloadBank(global.TEST_BANK);
gmwUnloadBank(global.GAME_BANK);

// Stop GMWWise
gmwStop();
gmwUnload();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Process audio
gmwProcess();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Toggling music
if (keyboard_check_pressed(ord("M")))
{
    if (global.VOLUME == 100)
    {
        // Mute the music
        global.VOLUME = 0;
        gmwSetGlobalParameter(global.WWP_MUSIC_VOLUME, global.VOLUME);
    }
    else
    {
        // Mute the music
        global.VOLUME = 100;
        gmwSetGlobalParameter(global.WWP_MUSIC_VOLUME, global.VOLUME);
    }
}

// Toggling ear state
if (keyboard_check_pressed(vk_space))
{
    if (global.PLUGGED_EARS)
    {
        // Set the ear state back to regular
        global.PLUGGED_EARS = false;
        gmwSetState(global.WWSG_AUDIO_TYPE, global.WWS_REGULAR_EARS);
    }
    else
    {
        // Set the ear state to plugged ears
        global.PLUGGED_EARS = true;
        gmwSetState(global.WWSG_AUDIO_TYPE, global.WWS_PLUGGED_EARS);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
